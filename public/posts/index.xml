<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Posts on WallBreakerNO4的博客</title>
    <link>http://100.119.72.3:1313/posts/</link>
    <description>Recent content in Posts on WallBreakerNO4的博客</description>
    <generator>Hugo -- 0.141.0</generator>
    <language>zh</language>
    <lastBuildDate>Sat, 21 Dec 2024 00:27:00 +0000</lastBuildDate>
    <atom:link href="http://100.119.72.3:1313/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title></title>
      <link>http://100.119.72.3:1313/posts/%E8%8D%89%E7%A8%BF/%E5%A6%82%E4%BD%95%E7%94%A8sd%E6%9D%A5%E6%B6%A9%E6%B6%A9/</link>
      <pubDate>Sat, 21 Dec 2024 00:27:00 +0000</pubDate>
      <guid>http://100.119.72.3:1313/posts/%E8%8D%89%E7%A8%BF/%E5%A6%82%E4%BD%95%E7%94%A8sd%E6%9D%A5%E6%B6%A9%E6%B6%A9/</guid>
      <description></description>
    </item>
    <item>
      <title>白嫖腾讯云GPU跑Stable Diffusion</title>
      <link>http://100.119.72.3:1313/posts/%E8%8D%89%E7%A8%BF/%E7%99%BD%E5%AB%96%E8%85%BE%E8%AE%AF%E4%BA%91gpu%E8%B7%91stable-diffusion-webui/</link>
      <pubDate>Sat, 21 Dec 2024 00:27:00 +0000</pubDate>
      <guid>http://100.119.72.3:1313/posts/%E8%8D%89%E7%A8%BF/%E7%99%BD%E5%AB%96%E8%85%BE%E8%AE%AF%E4%BA%91gpu%E8%B7%91stable-diffusion-webui/</guid>
      <description>&lt;p&gt;AI 绘画并不是一个离我们很远的话题，随着基于 diffusion 架构的 stable diffusion 的诞生，各式各样的绘图模型如井喷式诞生。如果想在本地跑 AIGC 的绘画软件，那么一块强大的 GPU 是必不可少的。但不是所有人都&lt;del&gt;是臭打游戏的&lt;/del&gt;拥有一块 GPU，因此我在这里介绍如何白嫖腾讯云的免费 GPU 来运行 Stable Diffusion WebUI&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;感谢 &lt;a href=&#34;https://linux.do/t/topic/262176&#34;&gt;Linux Do&lt;/a&gt; 上的网友将这个白嫖的方法分享出来&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;准备&#34;&gt;准备&lt;/h2&gt;
&lt;p&gt;首先打开 &lt;a href=&#34;https://ide.cloud.tencent.com/dashboard/gpu-workspace&#34;&gt;https://ide.cloud.tencent.com/dashboard/gpu-workspace&lt;/a&gt; ，登录后便能进入到这一个界面（图中是我已经创建好的，请忽略）：
&lt;img loading=&#34;lazy&#34; src=&#34;https://image.wall-breaker-no4.xyz/imgs/202412210041980.png&#34; alt=&#34;image.png&#34;  /&gt;
&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;腾讯云在 Cloud Studio 中提供了一个月 10000 分钟的 GPU 时长（2025 年 1 月 1 日后），免费的 GPU 配置为 Tesla T4，拥有 16G 的显存。这用于跑 Stable Diffusion WebUI 已经绰绰有余了。
美中不足的是，这个在排除了系统自带占用后，只有 30G 的空间，稍微有点小&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;新建一个工作空间：
&lt;img loading=&#34;lazy&#34; src=&#34;https://image.wall-breaker-no4.xyz/imgs/202412210046512.png&#34; alt=&#34;image.png&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;名称随便，能记住就行，模板选择 Pytorch：
&lt;img loading=&#34;lazy&#34; src=&#34;https://image.wall-breaker-no4.xyz/imgs/202412210047611.png&#34; alt=&#34;image.png&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;进入新建好的工作空间 &lt;del&gt;VScode 换皮&lt;/del&gt;
&lt;img loading=&#34;lazy&#34; src=&#34;https://image.wall-breaker-no4.xyz/imgs/202412210122200.png&#34; alt=&#34;image.png&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;将左侧的示例删除：
&lt;img loading=&#34;lazy&#34; src=&#34;https://image.wall-breaker-no4.xyz/imgs/202412210124619.png&#34; alt=&#34;image.png&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;新建一个终端：
&lt;img loading=&#34;lazy&#34; src=&#34;https://image.wall-breaker-no4.xyz/imgs/202412210126986.png&#34; alt=&#34;image.png&#34;  /&gt;

&lt;img loading=&#34;lazy&#34; src=&#34;https://image.wall-breaker-no4.xyz/imgs/202412210127485.png&#34; alt=&#34;image.png&#34;  /&gt;
&lt;/p&gt;
&lt;h2 id=&#34;安装-webui&#34;&gt;安装 WebUI&lt;/h2&gt;
&lt;p&gt;克隆项目（使用 Github Proxy 代理）到本地并进入 webui 文件夹：&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://100.119.72.3:1313/posts/%E8%8D%89%E7%A8%BF/%E8%AE%B0%E5%BD%95%E4%B8%80%E4%B8%8B%E7%BB%99%E5%AE%B6%E9%87%8C%E5%8D%87%E7%BA%A7%E4%BC%81%E4%B8%9A%E7%BA%A7%E7%BB%84%E7%BD%91%E8%B8%A9%E7%9A%84%E5%9D%91/</link>
      <pubDate>Sun, 03 Nov 2024 16:34:00 +0000</pubDate>
      <guid>http://100.119.72.3:1313/posts/%E8%8D%89%E7%A8%BF/%E8%AE%B0%E5%BD%95%E4%B8%80%E4%B8%8B%E7%BB%99%E5%AE%B6%E9%87%8C%E5%8D%87%E7%BA%A7%E4%BC%81%E4%B8%9A%E7%BA%A7%E7%BB%84%E7%BD%91%E8%B8%A9%E7%9A%84%E5%9D%91/</guid>
      <description>&lt;p&gt;前两天爸妈看着家里不爽，决定给家里的墙重新装修一下，顺便把家里的无线网络重整一下。这两天学校 reading week 放了一周的假，我就决定乘这次放假，回家把家里的无线网络布网升级一下。&lt;/p&gt;
&lt;h2 id=&#34;家里最初的网络&#34;&gt;家里最初的网络&lt;/h2&gt;
&lt;p&gt;由于在最开始装修时，没有提前在墙里布网线，我家的无线网一直都不好用。&lt;/p&gt;
&lt;p&gt;我家的户型图如下&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;图待补&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我家的光猫在客厅的位置，与卧室之间隔了两堵承重墙，因此卧室的位置型号极其糟糕，家里最开始使用了电力猫和无线网桥，但效果都不尽人意。最后在我高中的时候，家里决定重新扯一下网线，让每个房间都有网络&lt;/p&gt;
&lt;h2 id=&#34;这次改造前的网络&#34;&gt;这次改造前的网络&lt;/h2&gt;</description>
    </item>
    <item>
      <title>使用 Tailscale 组网</title>
      <link>http://100.119.72.3:1313/posts/%E4%BD%BF%E7%94%A8-tailscale-%E7%BB%84%E7%BD%91/</link>
      <pubDate>Thu, 01 Aug 2024 15:42:00 +0000</pubDate>
      <guid>http://100.119.72.3:1313/posts/%E4%BD%BF%E7%94%A8-tailscale-%E7%BB%84%E7%BD%91/</guid>
      <description>&lt;p&gt;今年年初，我购入了属于自己的 NAS，并在将其作为 HomeLab &lt;del&gt;All In Boom&lt;/del&gt; 搭建了许多服务。
&lt;img loading=&#34;lazy&#34; src=&#34;https://image.wall-breaker-no4.xyz/imgs/202403222130140.png#center&#34; alt=&#34;image.png&#34;  /&gt;
&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;部分自建的服务&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在宿舍的局域网内访问这些服务自然是十分方便的。但平常在校内上课时想访问 NAS 上的服务，就需要一番配置了。&lt;/p&gt;
&lt;h2 id=&#34;内网穿透&#34;&gt;内网穿透&lt;/h2&gt;
&lt;p&gt;内网穿透主要有两种：&lt;strong&gt;公网 IP 中转&lt;/strong&gt; or &lt;strong&gt;打洞直连&lt;/strong&gt;。这两种方式各有其优缺点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;公网 IP 中转：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;优点：对网络环境（准确说是 NAT 类型）没有要求&lt;/li&gt;
&lt;li&gt;缺点：需要公网 IP，如果宿舍没有公网 IP 的话则需要中转服务器
&lt;img loading=&#34;lazy&#34; src=&#34;https://image.wall-breaker-no4.xyz/imgs/20240620000934.png#center&#34; alt=&#34;image.png&#34;  /&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;打洞直连：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;优点：无需公网 IP&lt;/li&gt;
&lt;li&gt;缺点：在 P2P 连接中需要至少一个客户端有良好的 NAT 类型
&lt;img loading=&#34;lazy&#34; src=&#34;https://image.wall-breaker-no4.xyz/imgs/20240620000945.png#center&#34; alt=&#34;image.png&#34;  /&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;图片引用自 Tailscale &lt;a href=&#34;https://tailscale.com/kb/1151/what-is-tailscale&#34;&gt;官方文档&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;在&lt;del&gt;会同职业寄术学院&lt;/del&gt; UIC 一期宿舍内有三家运营商，分别是电信、移动和联通。其中联通是唯一一家同时提供 PPPoE 拨号和 IPv6 的运营商。在搬到一期宿舍前我还听说联通可以申请到公网 IP，因此选择了联通。然而现在联通也申请不到公网 IP 了，令人感慨。&lt;del&gt;得出结论，警惕 &lt;a href=&#34;https://blog.steven53.top/&#34;&gt;@Steven&lt;/a&gt; 的电信诈骗&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;在最开始，我选择了使用 WireGuard + 腾讯云轻量服务器作为中转来提供宿舍的内网穿透。这套方案最开始运作的很好，但用久了就暴露出了一些问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;配置复杂：WireGuard 的配置文件比较复杂，而在多个设备上管理配置文件简直不是人干的事。这个问题在添加新设备到 WireGuard 网络时尤为突出&lt;/li&gt;
&lt;li&gt;带宽低：由于网络的所有流量都需要经过腾讯云中转，而国内服务器的的带宽懂的都懂
&lt;img loading=&#34;lazy&#34; src=&#34;https://image.wall-breaker-no4.xyz/imgs/20240617145838.png#center&#34; alt=&#34;image.png&#34;  /&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;因此，我最后选择的方案为使用 Tailscale 打洞组网&lt;/p&gt;
&lt;h2 id=&#34;tailscale-是什么&#34;&gt;Tailscale 是什么&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Tailscale 是一种 VPN 服务，使用 WireGuard 协议创建安全的点对点网状网络。它简化了远程访问，通过加密连接设备，不需要复杂配置、中央网关或手动端口转发。Tailscale 通过避免中心化、降低延迟、维持网络间连接连续性，提高了速度、稳定性和可靠性。适用于开发者、小型企业和需要安全、可扩展网络解决方案的大型企业。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Tailscale 进阶使用教程 - MagicDNS、子网路由和自建中转</title>
      <link>http://100.119.72.3:1313/posts/%E8%8D%89%E7%A8%BF/tailscale-%E8%BF%9B%E9%98%B6%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B---%E5%AD%90%E7%BD%91%E8%B7%AF%E7%94%B1magicdns%E5%92%8C%E8%87%AA%E5%BB%BA%E4%B8%AD%E8%BD%AC/</link>
      <pubDate>Wed, 31 Jul 2024 15:42:00 +0000</pubDate>
      <guid>http://100.119.72.3:1313/posts/%E8%8D%89%E7%A8%BF/tailscale-%E8%BF%9B%E9%98%B6%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B---%E5%AD%90%E7%BD%91%E8%B7%AF%E7%94%B1magicdns%E5%92%8C%E8%87%AA%E5%BB%BA%E4%B8%AD%E8%BD%AC/</guid>
      <description>&lt;p&gt;在上一篇文章中，我介绍了 Tailscale 的搭建方法，同时说明了选择 Tailscale 的原因。在这篇文章中，我将介绍几个 Tailscale 的进阶玩法。&lt;/p&gt;
&lt;h2 id=&#34;subnet-routes子网路由&#34;&gt;Subnet routes（子网路由）&lt;/h2&gt;
&lt;p&gt;假设你有好几台设备，上边都部署了一些服务。这些设备在同一个局域网内，你希望你在外网时可以访问在这些设备上的服务。正常情况下，我们需要在每一台设备上都安装 tailscale 客户端，才能实现这样的需求。我们注意到，这些设备都在同一局域网（网段）下，因此我们可以使用 tailscale 自带的 subnet routes 来优化我们的组网。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Subnet routes 的&lt;a href=&#34;https://tailscale.com/kb/1019/subnets&#34;&gt;官方文章&lt;/a&gt;
太长不看版：Subnet routes（子网路由）是通过 Tailscale 连接远程网络（子网）的方法。配置 subnet routes 后，设备可以通过 Tailscale VPN 访问其他设备所在的本地网络，无需直接连接。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;假设我们的局域网配置如下图，局域网 IP 段为 &lt;code&gt;192.168.1.0/24&lt;/code&gt;，&lt;strong&gt;自己配置时请替换为实际 IP 段&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://image.wall-breaker-no4.xyz/imgs/202410111635185.png&#34; alt=&#34;tailscale subnet.drawio.png&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;我们可以将 tailscale 安装在任意一个设备上，在成功加入 tailscale 网络后，可以通过以下命令来添加子网&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如果你用的路由器运行着 openwrt，那么可以参考 openwrt 的&lt;a href=&#34;https://openwrt.org/docs/guide-user/services/vpn/tailscale/start&#34;&gt;官方文章&lt;/a&gt; 来安装 tailscale&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo tailscale set --advertise-routes&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;192.168.1.0/24&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后去 &lt;a href=&#34;https://login.tailscale.com/admin/machines&#34;&gt;tailscale 控制台&lt;/a&gt;，找到对应的设备，找到编辑路由设置
&lt;img loading=&#34;lazy&#34; src=&#34;https://image.wall-breaker-no4.xyz/imgs/202410111644921.png#center&#34; alt=&#34;image.png&#34;  /&gt;

最后将刚刚添加的子网勾选并保存
&lt;img loading=&#34;lazy&#34; src=&#34;https://image.wall-breaker-no4.xyz/imgs/202410111648375.png#center&#34; alt=&#34;image.png&#34;  /&gt;

现在 tailscale 网络里的所有设备（配置为子网路由网关的设备除外）访问 &lt;code&gt;192.168.1.0/24&lt;/code&gt; 这个网段的流量都会被路由到这个设备，这样便实现了子网路由&lt;/p&gt;
&lt;h2 id=&#34;自建中转&#34;&gt;自建中转&lt;/h2&gt;
&lt;p&gt;前文说到，tailscale 需要良好的 NAT 环境才能打洞成功并直连。但在部分情况下，tailscale 无法成功打洞。在这种情况下，tailscale 会选择使用 derp 来中转流量，也就是类似传统 VPN 的形式&lt;/p&gt;</description>
    </item>
    <item>
      <title>Tailscale 进阶使用教程 - MagicDNS、子网路由和自建中转</title>
      <link>http://100.119.72.3:1313/posts/%E8%8D%89%E7%A8%BF/tailscale-%E8%BF%9B%E9%98%B6%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B---%E5%AD%90%E7%BD%91%E8%B7%AF%E7%94%B1magicdns%E5%92%8C%E8%87%AA%E5%BB%BA%E4%B8%AD%E8%BD%AC.sync-conflict-20250117-161409-rgaci7e/</link>
      <pubDate>Wed, 31 Jul 2024 15:42:00 +0000</pubDate>
      <guid>http://100.119.72.3:1313/posts/%E8%8D%89%E7%A8%BF/tailscale-%E8%BF%9B%E9%98%B6%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B---%E5%AD%90%E7%BD%91%E8%B7%AF%E7%94%B1magicdns%E5%92%8C%E8%87%AA%E5%BB%BA%E4%B8%AD%E8%BD%AC.sync-conflict-20250117-161409-rgaci7e/</guid>
      <description>&lt;p&gt;在上一篇文章中，我介绍了 Tailscale 的搭建方法，同时说明了选择 Tailscale 的原因。在这篇文章中，我将介绍几个 Tailscale 的进阶玩法。&lt;/p&gt;
&lt;h2 id=&#34;subnet-routes子网路由&#34;&gt;Subnet routes（子网路由）&lt;/h2&gt;
&lt;p&gt;假设你有好几台设备，上边都部署了一些服务。这些设备在同一个局域网内，你希望你在外网时可以访问在这些设备上的服务。正常情况下，我们需要在每一台设备上都安装 tailscale 客户端，才能实现这样的需求。我们注意到，这些设备都在同一局域网（网段）下，因此我们可以使用 tailscale 自带的 subnet routes 来优化我们的组网。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Subnet routes 的&lt;a href=&#34;https://tailscale.com/kb/1019/subnets&#34;&gt;官方文章&lt;/a&gt;
太长不看版：Subnet routes（子网路由）是通过 Tailscale 连接远程网络（子网）的方法。配置 subnet routes 后，设备可以通过 Tailscale VPN 访问其他设备所在的本地网络，无需直接连接。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;假设我们的局域网配置如下图，局域网 IP 段为 &lt;code&gt;192.168.1.0/24&lt;/code&gt;，&lt;strong&gt;自己配置时请替换为实际 IP 段&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://image.wall-breaker-no4.xyz/imgs/202410111635185.png&#34; alt=&#34;tailscale subnet.drawio.png&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;我们可以将 tailscale 安装在任意一个设备上，在成功加入 tailscale 网络后，可以通过以下命令来添加子网&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如果你用的路由器运行着 openwrt，那么可以参考 openwrt 的&lt;a href=&#34;https://openwrt.org/docs/guide-user/services/vpn/tailscale/start&#34;&gt;官方文章&lt;/a&gt; 来安装 tailscale&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo tailscale set --advertise-routes&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;192.168.1.0/24&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后去 &lt;a href=&#34;https://login.tailscale.com/admin/machines&#34;&gt;tailscale 控制台&lt;/a&gt;，找到对应的设备，找到编辑路由设置
&lt;img loading=&#34;lazy&#34; src=&#34;https://image.wall-breaker-no4.xyz/imgs/202410111644921.png#center&#34; alt=&#34;image.png&#34;  /&gt;

最后将刚刚添加的子网勾选并保存
&lt;img loading=&#34;lazy&#34; src=&#34;https://image.wall-breaker-no4.xyz/imgs/202410111648375.png#center&#34; alt=&#34;image.png&#34;  /&gt;

现在 tailscale 网络里的所有设备（配置为子网路由网关的设备除外）访问 &lt;code&gt;192.168.1.0/24&lt;/code&gt; 这个网段的流量都会被路由到这个设备，这样便实现了子网路由&lt;/p&gt;
&lt;h2 id=&#34;自建中转&#34;&gt;自建中转&lt;/h2&gt;
&lt;p&gt;前文说到，tailscale 需要良好的 NAT 环境才能打洞成功并直连。但在部分情况下，tailscale 无法成功打洞。在这种情况下，tailscale 会选择使用 derp 来中转流量，也就是类似传统 VPN 的形式&lt;/p&gt;</description>
    </item>
    <item>
      <title>通过 Tailscale 为 CloudFlare Tunnel 配置代透明理来提升速度</title>
      <link>http://100.119.72.3:1313/posts/%E8%8D%89%E7%A8%BF/%E9%80%9A%E8%BF%87-tailscale-%E4%B8%BA-cloudflare-tunnel-%E9%85%8D%E7%BD%AE%E9%80%8F%E6%98%8E%E4%BB%A3%E7%90%86%E6%9D%A5%E6%8F%90%E5%8D%87%E9%80%9F%E5%BA%A6/</link>
      <pubDate>Tue, 30 Jul 2024 16:07:00 +0000</pubDate>
      <guid>http://100.119.72.3:1313/posts/%E8%8D%89%E7%A8%BF/%E9%80%9A%E8%BF%87-tailscale-%E4%B8%BA-cloudflare-tunnel-%E9%85%8D%E7%BD%AE%E9%80%8F%E6%98%8E%E4%BB%A3%E7%90%86%E6%9D%A5%E6%8F%90%E5%8D%87%E9%80%9F%E5%BA%A6/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;CloudFlare 为什么被称为云计算领域的神？在讨论这个问题之前，我想先说说其他云服务提供商相较于 CloudFlare 究竟差在了哪里&amp;hellip;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;好了，不开玩笑了 (‾◡◝)，但 CloudFlare 确实提供了很多实用且免费的服务给我们这些平民玩家，如免费的 Worker 和 CDN &lt;del&gt;虽然在国内是减速器&lt;/del&gt;，以及本文标题提及的 CloudFlare Tunnel。&lt;/p&gt;
&lt;h2 id=&#34;cloudflare-tunnel-是什么&#34;&gt;CloudFlare Tunnel 是什么&lt;/h2&gt;
&lt;p&gt;这是官方的产品介绍：&lt;a href=&#34;https://www.cloudflare.com/zh-cn/products/tunnel/&#34;&gt;官方文章&lt;/a&gt;
省流：你可以理解成这是一个类似 frp 的内网穿透服务，你可以将你部署在内网的 http 服务穿透到公网上。不同的是 CloudFlare 在上面集成了 CDN 服务，并且提供了自动 https。最关键的是，只要你将域名托管到 CloudFlare 上，你就可以免费的使用这个服务。&lt;/p&gt;
&lt;h3 id=&#34;but&#34;&gt;BUT!&lt;/h3&gt;
&lt;p&gt;CloudFlare 在国内访问速度不佳是众所周知的事 &lt;del&gt;CloudFlare 减速器&lt;/del&gt;。
&lt;img loading=&#34;lazy&#34; src=&#34;https://image.wall-breaker-no4.xyz/imgs/20240730160252.png#center&#34; alt=&#34;image.png&#34;  /&gt;

同样的道理，由于使用 CloudFlare Tunnel 的先决条件是在内网的机器能访问到 CloudFlare Tunnel Endpoint，然而在国内去访问这些 Endpoint 并不稳定。导致访问速度慢，甚至服务掉线。&lt;/p&gt;
&lt;p&gt;因此我想到是否可以通过给 Tunnel 添加前置代理的方法来提升速度与稳定性，在一番搜索之后找到这篇&lt;a href=&#34;https://blog.xmgspace.me/archives/cloudflare-tunnel-via-proxy.html&#34;&gt;文章&lt;/a&gt;。然而文章中指出：CloudFlare 官方的态度是不会支持 HTTP/Socks 前置代理 &lt;a href=&#34;https://github.com/cloudflare/cloudflared/issues/350#issuecomment-1706842883&#34;&gt;链接&lt;/a&gt;。因此，那篇文章中是使用了 V2ray + IPtables 手写路由达成了透明代理。&lt;/p&gt;
&lt;p&gt;受到文章启发，结合本人已经搭建好的 Tailscale 网络，我想到可以使用 Tailscale 的 Subnet routers（子网路由）功能来简单的实现透明代理。&lt;/p&gt;</description>
    </item>
    <item>
      <title>在安卓下同时使用 Clash 和 Tailscale</title>
      <link>http://100.119.72.3:1313/posts/%E8%8D%89%E7%A8%BF/%E5%9C%A8%E5%AE%89%E5%8D%93%E4%B8%8B%E5%90%8C%E6%97%B6%E4%BD%BF%E7%94%A8-clash-%E5%92%8C-tailscale/</link>
      <pubDate>Wed, 19 Jun 2024 23:49:00 +0000</pubDate>
      <guid>http://100.119.72.3:1313/posts/%E8%8D%89%E7%A8%BF/%E5%9C%A8%E5%AE%89%E5%8D%93%E4%B8%8B%E5%90%8C%E6%97%B6%E4%BD%BF%E7%94%A8-clash-%E5%92%8C-tailscale/</guid>
      <description>&lt;p&gt;在上一篇文章中，我们已经成功搭建了 Tailscale 网络，并在各个设备上安装了相应的客户端来访问网络。但我们注意到一点：在安卓系统上，同时只能运行一个 VPN 服务，因此 Tailscale 无法与 Clash 同时运行。而且不像 WireGuard，Clash 内核并没有提供对 Tailscale 的支持。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Clash 对 WireGuard 的支持： &lt;a href=&#34;https://en.clash.wiki/premium/userspace-wireguard.html&#34;&gt;https://en.clash.wiki/premium/userspace-wireguard.html&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;因此在安卓上，如果希望 Tailscale 和 Clash 共存的话，是需要一番折腾的&lt;/p&gt;
&lt;h2 id=&#34;先决条件&#34;&gt;先决条件&lt;/h2&gt;
&lt;p&gt;在 Google 了一番之后，我发现&lt;/p&gt;</description>
    </item>
    <item>
      <title>如何为Docker添加代理</title>
      <link>http://100.119.72.3:1313/posts/docker%E4%BB%A3%E7%90%86/</link>
      <pubDate>Thu, 13 Jun 2024 15:15:00 +0000</pubDate>
      <guid>http://100.119.72.3:1313/posts/docker%E4%BB%A3%E7%90%86/</guid>
      <description>&lt;p&gt;前段时间，我帮朋友搭建了一个我的世界服务器，并计划使用 Docker 来管理它。然而，在安装过程中，我发现镜像总是无法拉取。经过查阅资料，我发现可以通过配置 Docker Daemon 使用代理来拉取镜像。考虑到最近各个镜像站都撤掉了 Docker Hub 的镜像，我认为配置代理来访问 Docker Hub 可能是未来在大陆使用 Docker 的最佳方式。&lt;/p&gt;
&lt;h2 id=&#34;为-docker-daemon-配置代理&#34;&gt;为 Docker Daemon 配置代理&lt;/h2&gt;
&lt;p&gt;首先，创建配置文件：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo mkdir -p /etc/systemd/system/docker.service.d
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo nano /etc/systemd/system/docker.service.d/proxy.conf
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在配置文件中填入以下内容：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-conf&#34; data-lang=&#34;conf&#34;&gt;[Service]
Environment=&amp;#34;HTTP_PROXY=http://[proxy server IP]:[port]/&amp;#34;
Environment=&amp;#34;HTTPS_PROXY=http://[proxy server IP]:[port]/&amp;#34;
Environment=&amp;#34;NO_PROXY=localhost,127.0.0.1,::1,.local,.localdomain,192.168.0.0/16,172.16.0.0/12,10.0.0.0/8,100.64.0.0/10&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;请将 &lt;code&gt;[proxy server]:[port]&lt;/code&gt; 替换成代理服务的 IP 和端口&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我们需要重启 Docker Daemon 服务以使配置生效：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo systemctl daemon-reload
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo systemctl restart docker
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;现在，已经可以正常的拉取镜像&lt;/p&gt;
&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://docs.docker.com/config/daemon/systemd/#httphttps-proxy&#34;&gt;Docker Daemon Systemd 配置文档&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    <item>
      <title>Windows下生成并使用密钥登陆Linux</title>
      <link>http://100.119.72.3:1313/posts/windows%E4%B8%8B%E7%94%9F%E6%88%90%E5%B9%B6%E4%BD%BF%E7%94%A8%E5%AF%86%E9%92%A5%E7%99%BB%E9%99%86linux/</link>
      <pubDate>Wed, 12 Jun 2024 00:00:00 +0000</pubDate>
      <guid>http://100.119.72.3:1313/posts/windows%E4%B8%8B%E7%94%9F%E6%88%90%E5%B9%B6%E4%BD%BF%E7%94%A8%E5%AF%86%E9%92%A5%E7%99%BB%E9%99%86linux/</guid>
      <description>&lt;h3 id=&#34;生成密钥&#34;&gt;生成密钥&lt;/h3&gt;
&lt;p&gt;命令：&lt;code&gt;$ ssh-keygen -t rsa&lt;/code&gt;
生成的私钥以 &lt;code&gt;.pub&lt;/code&gt; 结尾，内容类似如下：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;ssh-rsa AAAAB3NzaC1yc...D4J6QDEnOtzMCIk= zhifa@Wall-PC
&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
&lt;h3 id=&#34;上传密钥&#34;&gt;上传密钥&lt;/h3&gt;
&lt;p&gt;登陆 Linux，打开 &lt;code&gt;~/.ssh/authorized_keys&lt;/code&gt; ，并把公钥文件中的内容复制到其中&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;设置权限&#34;&gt;设置权限&lt;/h3&gt;
&lt;p&gt;使用 &lt;code&gt;chmod&lt;/code&gt; 将 &lt;code&gt;authorized_keys&lt;/code&gt; 文件权限设置为 &lt;code&gt;664&lt;/code&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;调整-openssh-选项&#34;&gt;调整 openSSH 选项&lt;/h3&gt;
&lt;p&gt;以 &lt;code&gt;root&lt;/code&gt; 身份打开 &lt;code&gt;/etc/ssh/sshd_config&lt;/code&gt; ，更改以下几项：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;PermitRootLogin no
PubkeyAuthentication yes
PasswordAuthentication no
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;重启 &lt;code&gt;sshd&lt;/code&gt; 服务&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$ sudo systemctl restart sshd.service&lt;/code&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;windows-设置&#34;&gt;Windows 设置&lt;/h3&gt;
&lt;p&gt;打开 &lt;code&gt;.ssh/&lt;/code&gt; 文件夹下的 &lt;code&gt;config&lt;/code&gt; 文件，添加类似如下内容&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Host tx   #别名
	User wall   #登陆用户名
	Hostname wall-breaker-no4.xyz   #服务器地址
	PreferredAuthentications publickey   #使用密钥登陆
	IdentityFile C:\Users\zhifa\.ssh\tx_rsa   #私钥地址
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    <item>
      <title>目前我使用的内网穿透方法</title>
      <link>http://100.119.72.3:1313/posts/%E5%9E%83%E5%9C%BE%E6%A1%B6/%E7%9B%AE%E5%89%8D%E6%88%91%E4%BD%BF%E7%94%A8%E7%9A%84%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%E6%96%B9%E6%B3%95/</link>
      <pubDate>Tue, 28 Nov 2023 09:32:00 +0000</pubDate>
      <guid>http://100.119.72.3:1313/posts/%E5%9E%83%E5%9C%BE%E6%A1%B6/%E7%9B%AE%E5%89%8D%E6%88%91%E4%BD%BF%E7%94%A8%E7%9A%84%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%E6%96%B9%E6%B3%95/</guid>
      <description>&lt;p&gt;前天晚上我在折腾我的 OpenWRT 路由器时不小心把路由表 boom 了，炸到访问不到管理网页的程度。由于那是一台硬路由，我不得不重新安装系统并且重新配置。
&lt;img loading=&#34;lazy&#34; src=&#34;https://image.wall-breaker-no4.xyz/imgs/202311291728450.png&#34; alt=&#34;image.png&#34;  /&gt;
&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;del&gt;那天晚上我宿舍的网络状态&lt;/del&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在重新配置的过程中，除了让人心碎的多拨和分流配置，最让我头疼的就是配置我用来内网穿透的 WireGuard。因此我决定记录一下我目前使用的内网穿透服务，即 WireGuard，以防未来我需要重新配置时又需要头脑风暴。&lt;/p&gt;
&lt;h2 id=&#34;哦选择&#34;&gt;哦，选择！&lt;/h2&gt;
&lt;p&gt;目前市面上有许多的内网穿透服务，大体上可以分为两类：VPN 和 P2P 打洞。这两者的优缺点如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;VPN
&lt;ul&gt;
&lt;li&gt;较为稳定&lt;/li&gt;
&lt;li&gt;需要至少一个公网 IP&lt;/li&gt;
&lt;li&gt;速度上限取决于公网 IP 设备&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;P2P 打洞
&lt;ul&gt;
&lt;li&gt;无需公网 IP&lt;/li&gt;
&lt;li&gt;要访问的内网需要有良好的 NAT 类型&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;我的选择&#34;&gt;我的选择&lt;/h3&gt;
&lt;p&gt;对于这两种类型的解决方案，我分别尝试了 WireGuard（VPN）和 ZeroTier（P2P）。最终基于以下理由，我选择了 WireGuard：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;我有一台拥有公网 IP 的服务器&lt;/li&gt;
&lt;li&gt;在校内我不需要高速访问宿舍内（如看视频）~~~我可以回宿舍看~~~&lt;/li&gt;
&lt;li&gt;由于不需要打洞，相比ZeroTier建立连接所需的时间极短，几乎无感&lt;/li&gt;
&lt;li&gt;同样由于不需要打洞，在更换网络环境时（如自习室到教室）时不需要重新建立连接&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;搭建-wireguard&#34;&gt;搭建 WireGuard&lt;/h2&gt;</description>
    </item>
    <item>
      <title>在Ubuntu上安装zsh以及高亮、自动补全插件</title>
      <link>http://100.119.72.3:1313/posts/ubuntu-zsh/</link>
      <pubDate>Wed, 22 Nov 2023 00:00:00 +0000</pubDate>
      <guid>http://100.119.72.3:1313/posts/ubuntu-zsh/</guid>
      <description>&lt;p&gt;记录一下如何在 Ubuntu 上安装 zsh，以及高亮、自动补全插件和自定义主题&lt;/p&gt;
&lt;h2 id=&#34;安装-zsh&#34;&gt;安装 zsh&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo apt install zsh git fonts-font-awesome
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;安装-oh-my-zsh&#34;&gt;安装 Oh My Zsh&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Oh My Zsh will not make you a 10x developer&amp;hellip; But you may feel like one!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sh -c &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;wget https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh -O -&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;安装插件和主题&#34;&gt;安装插件和主题&lt;/h2&gt;
&lt;h3 id=&#34;语法高亮&#34;&gt;语法高亮&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git clone https://github.com/zsh-users/zsh-syntax-highlighting.git &lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;ZSH_CUSTOM&lt;span style=&#34;color:#66d9ef&#34;&gt;:-&lt;/span&gt;~/.oh-my-zsh/custom&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;/plugins/zsh-syntax-highlighting
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;自动补全&#34;&gt;自动补全&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git clone https://github.com/zsh-users/zsh-autosuggestions &lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;ZSH_CUSTOM&lt;span style=&#34;color:#66d9ef&#34;&gt;:-&lt;/span&gt;~/.oh-my-zsh/custom&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;/plugins/zsh-autosuggestions
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;安装主题&#34;&gt;安装主题&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git clone --depth&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; https://github.com/romkatv/powerlevel10k.git &lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;ZSH_CUSTOM&lt;span style=&#34;color:#66d9ef&#34;&gt;:-&lt;/span&gt;$HOME/.oh-my-zsh/custom&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;/themes/powerlevel10k
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;配置文件&#34;&gt;配置文件&lt;/h3&gt;
&lt;p&gt;打开 &lt;code&gt;~/.zshrc&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;nano ~/.zshrc
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;把 &lt;code&gt;ZSH_THEME&lt;/code&gt; 改成 &lt;code&gt;powerlevel10k/powerlevel10k&lt;/code&gt;：
&lt;img loading=&#34;lazy&#34; src=&#34;https://image.wall-breaker-no4.xyz/imgs/202311220011285.png#center&#34; alt=&#34;image.png&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;在 &lt;code&gt;plugins&lt;/code&gt; 处加上 &lt;code&gt;zsh-syntax-highlighting&lt;/code&gt; 和 &lt;code&gt;zsh-autosuggestions&lt;/code&gt;（用空格隔开）：
&lt;img loading=&#34;lazy&#34; src=&#34;https://image.wall-breaker-no4.xyz/imgs/202311220013082.png#center&#34; alt=&#34;image.png&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;或者直接使用这条 sed 命令一键替换：&lt;/p&gt;</description>
    </item>
    <item>
      <title>博客搭建过程记录</title>
      <link>http://100.119.72.3:1313/posts/%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2/</link>
      <pubDate>Mon, 20 Nov 2023 15:46:00 +0000</pubDate>
      <guid>http://100.119.72.3:1313/posts/%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;本人是一位计算机专业的学生，而学习计算机往往需要在网上自学很多内容。在网上搜索资料的的时候，抛开臭名昭著的 CSDN &lt;del&gt;虽然里面还是有一些不错的内容&lt;/del&gt;，最常见到的就是各式各样的个人博客。这些个人博客往往质量都相当高，我从这些博客中学习到了相当多的知识，收获颇丰。秉着“前人栽树，后人乘凉”的思想，在享受了那么多人栽的树后，我也决定搭个自己的博客。不求能做到栽树的水平，能够记录自己的学习经历，也已经很满意了。&lt;/p&gt;
&lt;h2 id=&#34;域名&#34;&gt;域名&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;搭博客的第一步，自然是拥有一个属于自己的域名&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;wall-breaker-no4.xyz&lt;/code&gt; 这个域名，是我在 18 岁生日时给自己购买的生日礼物。这个域名最初是在腾讯云上购买的，后面迁移到了 Cloudflare 上。主要目的是为了白嫖 CF 免费的 CDN，次要目的是规避国内建站所需要的实名和备案。&lt;/p&gt;
&lt;h2 id=&#34;框架&#34;&gt;框架&lt;/h2&gt;
&lt;p&gt;市面上主要的博客框架分为以下两大类：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;动态博客框架&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://wordpress.org/&#34;&gt;WordPress&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://typecho.org/&#34;&gt;Typecho&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&amp;hellip;&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;静态博客框架&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://hexo.io&#34;&gt;Hexo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://gohugo.io/&#34;&gt;Hugo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&amp;hellip;&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最开始，我计划参考经常访问的一个博客：&lt;a href=&#34;https://p3terx.com/&#34;&gt;P3TERX ZONE&lt;/a&gt;，使用动态框架 Typecho 来搭建我的博客。
但我最后还是选用了静态框架 Hugo 来搭建我的博客，原因如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在搭建难度上，静态博客相比动态博客更简单 &lt;del&gt;我菜死了&lt;/del&gt;&lt;/li&gt;
&lt;li&gt;静态博客可以靠 GitHub pages 之类的服务提供网站，可靠程度++&lt;/li&gt;
&lt;li&gt;Hugo 对 Markdown 的支持很好，可以把 Hugo 和 Obsidian 联动起来，方便写文章&lt;/li&gt;
&lt;li&gt;我的朋友 &lt;a href=&#34;https://ecwuuuuu.com/&#34;&gt;@ECWU&lt;/a&gt; 和 &lt;a href=&#34;https://blog.steven53.top/&#34;&gt;@Steven53&lt;/a&gt; 都使用 Hugo 来搭建博客，有问题可以请教 &lt;del&gt;骚扰&lt;/del&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;部署和托管&#34;&gt;部署和托管&lt;/h2&gt;
&lt;p&gt;由于我的域名在就在 Cloudflare 上，因此在网站托管提供商上，我选择了 &lt;a href=&#34;https://developers.cloudflare.com/pages/&#34;&gt;Cloudflare Pages&lt;/a&gt;。
至于如何在 Cloudflare Pages 上托管 Hugo 站点可以参考&lt;a href=&#34;https://developers.cloudflare.com/pages/framework-guides/deploy-a-hugo-site/&#34;&gt;官方文档&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;图床&#34;&gt;图床&lt;/h2&gt;
&lt;p&gt;图床可以选择图床提供商，或者自建图床。图床提供商有免费的也有付费的，如国外有 &lt;a href=&#34;https://sm.ms/&#34;&gt;SM. MS&lt;/a&gt;，国内有&lt;a href=&#34;https://www.qiniu.com/&#34;&gt;七牛云&lt;/a&gt; 等。自建图床也可以使用各个厂商的对象存储来实现。但是最终我选择了 GitHub repository + Cloudflare Workers 来自建图床，原因如下：&lt;/p&gt;</description>
    </item>
    <item>
      <title>TeamSpeak 3 客户端使用教程</title>
      <link>http://100.119.72.3:1313/posts/ts3/</link>
      <pubDate>Thu, 16 Nov 2023 17:19:00 +0000</pubDate>
      <guid>http://100.119.72.3:1313/posts/ts3/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;&lt;del&gt;&lt;strong&gt;TeamSpeak 最新版为 TeamSpeak 5，操作界面有很大的变化，这篇文章已经过时，仅供参考&lt;/strong&gt;&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;TeamSpeak 5 超级垃圾，不如 TeamSpeak 3 一根，占用又高，所以这篇文章没有过时🥰🥰&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;0x00--前言--什么是-teamspeak-3&#34;&gt;0x00 | 前言 | 什么是 TeamSpeak 3？&lt;/h2&gt;
&lt;p&gt;TeamSpeak 3 （下文简称为 TS3）是一款 VoIP（语音聊天）软件，其提供了免费的服务端与客户端。相比于其他我们常用的聊天软件，如国内常见的 &lt;code&gt;KOOK（原开黑啦）&lt;/code&gt; 和国外常见的 &lt;code&gt;Discord&lt;/code&gt;，其最大的优点是其资源占用低。&lt;/p&gt;
&lt;p&gt;如下图所见，在 &lt;code&gt;KOOK&lt;/code&gt;、&lt;code&gt;Discord&lt;/code&gt;、&lt;code&gt;Tim&lt;/code&gt; 和 &lt;code&gt;TeamSpeak 3&lt;/code&gt; 这四款语音软件中，TeamSpeak 3 对内存的占用是最低的，仅有 77.2MB。&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://s2.loli.net/2022/09/10/c7HWAZLaNC4S1P6.png&#34; alt=&#34;image.png&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;因此，在电脑性能相对不高，内存容量相对不富裕时，TeamSpeak 3 无疑是绝佳的选择。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;0x01--下载&#34;&gt;0x01 | 下载&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;重要：此教程中所需的所有文件我都在国内的网盘中提供了一份，若你无法访问官网的话可以退而求其次从我的网盘链接中下载&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;打开 TeamSpeak 3 &lt;a href=&#34;https://www.teamspeak.com/zh-CN/downloads/&#34;&gt;官网&lt;/a&gt;并下载 Windows 64 位版本客户端 （官网在墙外，打开速度可能较慢，这里提供下载好的客户端在国内网盘的&lt;a href=&#34;https://wallbreakerno4.lanzouj.com/ihFUq0bfn5rc&#34;&gt;镜像&lt;/a&gt;）。&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://s2.loli.net/2022/09/10/kFIcUKC1QBSRVer.png&#34; alt=&#34;image.png&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;下载好的文件应如下图所示。&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://s2.loli.net/2022/09/10/MjzovhZ7U92e1JW.png&#34; alt=&#34;image.png&#34;  /&gt;
&lt;/p&gt;
&lt;h2 id=&#34;0x02--安装&#34;&gt;0x02 | 安装&lt;/h2&gt;
&lt;p&gt;双击打开安装包。&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://s2.loli.net/2022/09/10/wyM9n4OtS7UZ6XJ.png&#34; alt=&#34;image.png&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;拉到最底部并同意协议。&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://s2.loli.net/2022/09/10/qtiTj5opWwGCNSM.png&#34; alt=&#34;image.png&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;选哪个都无所谓，但是我推荐选 &lt;code&gt;Install just for me&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://s2.loli.net/2022/09/10/ImT698fJKZEDFGV.png&#34; alt=&#34;image.png&#34;  /&gt;
&lt;/p&gt;</description>
    </item>
    <item>
      <title>Hello World</title>
      <link>http://100.119.72.3:1313/posts/my-first-post/</link>
      <pubDate>Thu, 16 Nov 2023 14:19:00 +0000</pubDate>
      <guid>http://100.119.72.3:1313/posts/my-first-post/</guid>
      <description>&lt;p&gt;第一篇博客总得是 Hello World 吧&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
